@model AIS_RubricFeedbackGenerator.ViewModels.TaskFormViewModel
@{
	ViewData["Title"] = "Edit Task";
	ViewData["FormAction"] = "Edit";
}

<h2 class="mb-2">@ViewData["Title"]</h2>

@if (TempData["TaskMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
		@TempData["TaskMessage"]
		<a asp-controller="Task" asp-action="Index">
			 Back to List
		</a>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<form asp-action="@ViewData["FormAction"]" method="post" class="card mb-3">
	@Html.AntiForgeryToken()
	<input type="hidden" asp-for="TaskId" />
	<partial name="_TaskForm" model="Model" />
	<div class="card-footer">
		<div class="text-end">
			<button type="submit" class="btn btn-success">Save Task</button>
		</div>
	</div>
</form>
<div class="card">
	<h3 class="mb-2 card-header">Marking Rubrics</h3>
	<div class="card-body">
		<a asp-controller="Rubric" asp-action="Create" asp-route-id="@Model.TaskId" class="btn btn-primary">
			<i class="fa fa-plus me-1"></i> Add New Rubric
		</a>
		<table class="table w-100" id="rubricsTable">
			<thead>
				<tr>
					<th>Rubric Title</th>
					<th>Description</th>
					<th>Total Mark</th>
                    <th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var rubric in Model.Rubrics)  // Make sure you include Rubrics in Task model or ViewModel
				{
					<tr>
						<td>@rubric.Title</td>
						<td>@rubric.Description</td>
						<td>@rubric.TotalMark</td>
						<td class="text-center">
							<a asp-controller="Rubric" asp-action="Edit" asp-route-id="@rubric.RubricId" title="Edit Rubric" class="btn btn-sm btn-primary">
								<i class="fa-solid fa-pen-to-square"></i>
							</a>
							<button type="button"
									class="btn btn-danger btn-sm"
									title="Delete Rubric"
									data-bs-toggle="modal"
									data-bs-target="#deleteModal"
									data-rubric-id="@rubric.RubricId"
									data-rubric-title="@rubric.Title">
								<i class="fa-solid fa-trash"></i>
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>
<div class="mt-3">
	<a asp-controller="Task" asp-action="Index" class="btn btn-secondary">
		<i class="fa fa-arrow-left me-1"></i> Back to List
	</a>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header bg-danger text-white">
				<h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete the rubric <strong id="rubricTitleToDelete"></strong>?
			</div>
			<div class="modal-footer">
				<form id="deleteForm" method="post" onsubmit="return disableDeleteButton()">
					@Html.AntiForgeryToken()
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" id="confirmDeleteBtn" class="btn btn-danger" disabled>Delete (2)</button>
				</form>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		$(function () {
			$('#rubricsTable').DataTable({
				"lengthChange": false,
				"searching": false,
				"paging": false,
				"info": false
			});

			const deleteModal = document.getElementById('deleteModal');
			let countdown; // store countdown timer id

			deleteModal.addEventListener('show.bs.modal', function (event) {
				const button = event.relatedTarget;
				const rubricId = button.getAttribute('data-rubric-id');
				const rubricTitle = button.getAttribute('data-rubric-title');

				// Set form action
				const form = document.getElementById('deleteForm');
				form.action = '/Rubric/Delete/' + rubricId;

				// Set title inside modal
				document.getElementById('rubricTitleToDelete').textContent = rubricTitle;

				// Countdown logic for disabling Delete button
				const deleteBtn = document.getElementById('confirmDeleteBtn');
				let seconds = 2;
				deleteBtn.disabled = true;
				deleteBtn.textContent = `Delete (${seconds})`;

				// Clear any previous countdown (important if modal reopened fast)
				if (countdown) {
					clearInterval(countdown);
				}

				countdown = setInterval(() => {
					seconds--;
					if (seconds > 0) {
						deleteBtn.textContent = `Delete (${seconds})`;
					} else {
						clearInterval(countdown);
						deleteBtn.disabled = false;
						deleteBtn.textContent = 'Delete';
					}
				}, 1000);
			});
		});

		// Disable the delete button after submit to prevent multiple submits
		function disableDeleteButton() {
			const btn = document.getElementById('confirmDeleteBtn');
			btn.disabled = true;
			btn.innerText = 'Deleting...';
			return true; // allow form submission
		}
	</script>
}