// <auto-generated />
using System;
using AIS_RubricFeedbackGenerator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIS_RubricFeedbackGenerator.Migrations
{
    [DbContext(typeof(AIS_RubricFeedbackGeneratorContext))]
    partial class AIS_RubricFeedbackGeneratorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Criterion", b =>
                {
                    b.Property<string>("CriterionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RubricId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CriterionId");

                    b.HasIndex("RubricId");

                    b.ToTable("Criteria", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Rubric", b =>
                {
                    b.Property<string>("RubricId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TotalMark")
                        .HasPrecision(4, 1)
                        .HasColumnType("float(4)");

                    b.HasKey("RubricId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TaskId");

                    b.ToTable("Rubrics", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.ScoreDefinition", b =>
                {
                    b.Property<string>("ScoreDefinitionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("RubricId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScoreName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<double>("ScoreValue")
                        .HasPrecision(4, 1)
                        .HasColumnType("float(4)");

                    b.HasKey("ScoreDefinitionId");

                    b.HasIndex("RubricId", "ScoreValue")
                        .IsUnique();

                    b.ToTable("ScoreDefinitions", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.ScoreLevel", b =>
                {
                    b.Property<string>("ScoreLevelId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CriterionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ScoreDefinitionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ScoreLevelId");

                    b.HasIndex("CriterionId");

                    b.HasIndex("ScoreDefinitionId");

                    b.ToTable("ScoreLevels", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StudentId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TotalMark")
                        .HasPrecision(4, 1)
                        .HasColumnType("float(4)");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Criterion", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Models.Rubric", "Rubric")
                        .WithMany("Criteria")
                        .HasForeignKey("RubricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rubric");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Rubric", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", "CreatedByNavigation")
                        .WithMany("Rubrics")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Rubric_User");

                    b.HasOne("AIS_RubricFeedbackGenerator.Models.Task", "Task")
                        .WithMany("Rubrics")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rubric_Task");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.ScoreDefinition", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Models.Rubric", "Rubric")
                        .WithMany("ScoreDefinitions")
                        .HasForeignKey("RubricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScoreDefinition_Rubric");

                    b.Navigation("Rubric");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.ScoreLevel", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Models.Criterion", "Criterion")
                        .WithMany("ScoreLevels")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScoreLevel_Criterion");

                    b.HasOne("AIS_RubricFeedbackGenerator.Models.ScoreDefinition", "ScoreDefinition")
                        .WithMany("ScoreLevels")
                        .HasForeignKey("ScoreDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ScoreLevel_ScoreDefinition");

                    b.Navigation("Criterion");

                    b.Navigation("ScoreDefinition");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Student", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", "CreatedByNavigation")
                        .WithMany("Students")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Students_Users");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Task", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Task_User");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Areas.Identity.Data.AIS_RubricFeedbackGeneratorUser", b =>
                {
                    b.Navigation("Rubrics");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Criterion", b =>
                {
                    b.Navigation("ScoreLevels");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Rubric", b =>
                {
                    b.Navigation("Criteria");

                    b.Navigation("ScoreDefinitions");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.ScoreDefinition", b =>
                {
                    b.Navigation("ScoreLevels");
                });

            modelBuilder.Entity("AIS_RubricFeedbackGenerator.Models.Task", b =>
                {
                    b.Navigation("Rubrics");
                });
#pragma warning restore 612, 618
        }
    }
}
